## 1 Running first test

- "App.test.js"
  => File to Test "App.js"

--------------------------------------------------------- npm test
Runs "test()" function inside "App.test.js"

////////////////////////////////////////////////////////////////////////////////////////////////

## 2 Writting our own test

- Created
  => "Greeting.js"
  => Module Returns a <div> & <p>

- "App.js"
  => Rendering the created <Greeting> component

- Created
  => "Greeting.test.js"
  => Created { test() } function
  => { render(<Component>) } To Select location to test
  => { screen.getByText('') } To Get Text/Data
  => { expect().toBeInTheDocument() } To check if "Text/Data" is in the doc

- Deleted
  => "App.test.js"

--------------------------------------------------------- test()
global available function from React

--------------------------------------------------------- import { render } from "@testing-library/react";
To Select location to test

--------------------------------------------------------- import { screen } from "@testing-library/react";
To Get Text/Data from screen (To get what to test)

---------------------------------------------------------- screen.getByText('')
<screen.getByText('ANYTHING', { excat: false })>

--------------------------------------------------------- expect(SCREEN_DATA).toBeInTheDocument()
To check if "Text/Data" is in the document (test)

////////////////////////////////////////////////////////////////////////////////////////////////

## 3 Grouping Test Together With Test Suites

- "Greeting.test.js"
  => Using { describe() } to group test Suites

--------------------------------------------------------- describe('DESCRIPTION', () => { test('') })
to group test Suites

////////////////////////////////////////////////////////////////////////////////////////////////

## 4 Testing User Interaction & State

- "Greeting.js"
  => Implemented { useState } for testing

- "Greeting.test.js"
  => Implementing { test() } with "ACTS"

  => using { screen.queryByText('') } To return null if not exist
  => Implemented { expect().toBeNull() } To check if not exist === true

---------------------------------------------------------- import { userEvent } from "@testing-library";
To determine what type of event for testing

---------------------------------------------------------- screen.queryByText('')
To get data (Null if not exist)

---------------------------------------------------------- expect(SCREEN_DATA).toBeNull()
To check if is null (not exist)

////////////////////////////////////////////////////////////////////////////////////////////////

## 5 Testing Connected Components

- Created
  => "Output.js"

- "Greeting.js"
  => Wrapped out <Output> Component

**\*** React Test Automatically Test Connected Components **\***

////////////////////////////////////////////////////////////////////////////////////////////////

## 6 Testing Async Code

- Created
  => "Async.js"
  => { useEffect } to send HTTP Request
  => returns items as JSX

- Created
  => "Async.test.js"
  => { describe() } To create a Suite (list) of tests
  => { test('', async() => {}) } creating async/await test() function
  => { await screen.findAllByRole } To find async data

------------------------------------------------- await screen.findAllByRole('anyData', {exact:}, {timeout:})
Return a promise
Get All "anyData" data
{timeout:} => stop waiting for data

------------------------------------------------- screen.getAllByRole('anyName')
Get All "anyName" data

////////////////////////////////////////////////////////////////////////////////////////////////

## 7 Working with Mocks

**\*** Not Recommended to send HTTP only for Testing **\***
Instead we want to only test our code without senting HTTP request using (Mocks) a DUMMY function

- "Async.test.js"
  => Creating a (Mock) Function (DUMMY function to simnulate a HTTP request)

------------------------------------------------- window.fetch = jest.fn()
To create (MOCK) function

------------------------------------------------- window.fetch.mockResolvedValueOnce({ json: async () => [{ data }] })
To add (MOCK) data to the function
